Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для управління штучним мікрокліматом в оранжереї

Студент гр. ПЗПІ-21-4                    _______________________ Дубовий М.В.  
(підпис)

Керівник роботи                           ___________________ доц. Лещинська І.О.
(підпис)
Роботу захищено «__»_________2024 р.
з оцінкою _________________________

    Комісія:                                     ___________________ доц. Лещинський В.О.
(підпис)
_____________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)


Харків
2024 р.
Аркуш завдання 
 
 
Харківський національний університет радіоелектроніки   
Факультет комп’ютерних наук Кафедра програмної інженерії  Спеціальність 121 – Інженерія програмного забезпечення            
Курс          3          Семестр                                  6                                                        
Навчальна дисципліна Архітектура програмного забезпечення
ЗАВДАННЯ 
НА КУРСОВУ РОБОУ СТУДЕНТОВІ
                                          Дубовому Микиті Вячеславовичу                                         
1. Тема проєкту: Програмна система для управління штучним мікрокліматом в оранжереї.                                                 
2.	Термін узгодження завдання з лабораторних робіт «29»   березня  2024 р.  
3.	Термін здачі завдання з лабораторних робіт «10»     червня       2024 р.   
4.	Вихідні дані до проєкту: Програмна система має впроваджувати оригінальне рішення актуальної проблеми. Вона повинна задовольняти потреби масового користувача. Одна з головних вимог до програмної системи – можливість монетизації. Система включатиме серверну частину, клієнтські та адміністраторські веб та мобільні додатки, а також інтеграцію розумних пристроїв для контролю за станом оранжереї та мікрокліматом усередині. Необхідним критерієм є забезпечення безпеки даних та доступ до інструментів адміністрування.
5.	Зміст звітів з лабораторних робіт (перелік питань, що належить  розробити): Для кожної лабораторної роботи, слід підготувати документацію та опис всього реалізованого функціоналу, UML-діаграми та текстовий опис прийнятих інженерних рішень. До лабораторних робіт, котрі включають розробку, мають бути створені відеоролики з демонстрацією роботи системи та пояснення програмного коду.   
6.	Перелік графічного матеріалу (діаграми, рисунки, інтерфейси): UML-діаграма розгортання, UML-діаграма прецедентів, UML-діаграма взаємодії, UML-діаграма діяльності, UML-діаграма компонентів, ER-модель даних.                                  

КАЛЕНДАРНИЙ ПЛАН


№	Назва етапу курсової роботи	Термін виконання	Примітка
1	Функціональна специфікація
програмного проєкту	26.02.2024 - 29.03.2024 р.	виконано
2	Проектування програмного
проєкту	01.04.2024 - 14.04.2024 р.	виконано
3	Кодування програмного проєкту	22.04.2024 - 01.06.2024 р.	виконано
4	Оформлення пояснювальної
записки	02.05.2022 - 05.06.2024 р.	виконано
5	Захист курсової роботи	06.06.2024 - 10.06.2024 р.	


Дата видачі теми проєкту «   29   »         березня         2024 р.  

Керівник                                                                    доц.Лещинська І.О.
  					  	(підпис)  

Завдання прийняв до виконання 
ст.гр. ПЗПІ-21-4                                                         Дубовий М.В.    
  					  	    (підпис)  

 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: с. 48, рис. 4, табл. 3, додатки 2, джерел 5.
МІКРОКЛІМАТ, МОНІТОРИНГ, ПРИСТРІЙ, РОЗУМНА ОРАНЖЕРЕЯ, РОСЛИНА, СИСТЕМА, СЕНСОР, УМОВИ, УПРАВЛІННЯ.
Об'єктом дослідження виступають системи розумної оранжереї, які забезпечують автоматизоване управління умовами вирощування рослин. Розглядаються сучасні проблеми, пов'язані з моніторингом та регулюванням параметрів середовища в оранжереях.
Метою курсової роботи є розробка системи, що забезпечує підвищення ефективності управління оранжереями, а саме моніторинг та автоматичне регулювання параметрів середовища, таких як температура, вологість, освітленість та рівень вуглекислого газу. Система забезпечує збереження даних сенсорів, надає можливість додавання нових сенсорів і пристроїв, а також автоматично відправляє команди для підтримки оптимальних умов.
Метою даної курсової роботи є розробка комплексної системи, що підвищує ефективність управління оранжереями. Система забезпечує збереження даних від сенсорів, автоматичне регулювання умов, додавання нових сенсорів та пристроїв, а також моніторинг і керування оранжереєю через веб-інтерфейс.
Методи розробки серверної частини базуються на мові програмування C# та фреймворку ASP.NET Core, MongoDB використовується в якості бази даних. Клієнтська частина базується на використанні бібліотеки React. Для забезпечення автоматизації та взаємодії зі смарт-пристроями, які відповідають за регулювання умов в оранжереї, використовуються мови програмування Python та C#.
У результаті роботи здійснено програмну реалізацію системи управління розумною оранжереєю. Програмна система складається з веб-додатку, сервера та смарт-пристроїв для моніторингу та регулювання умов.


ЗМІСТ


Вступ	8
1 Аналіз та концептуальне моделювання предметної області	10
1.1	Бізнес-вимоги	10
1.1.1	Бізнес можливості	10
1.1.2	Бізнес-цілі та критерії успіху	11
1.1.3	Потреби клієнтів або ринку	12
1.1.4	Бізнес-ризики	13
1.2	Концепція рішення	14
1.2.1	Окреслення концепції	14
1.2.2	Головна функціональність	15
1.2.3	Припущення та залежності	17
1.3	Рамки та обмеження проєкту	18
1.3.1	Рамки первинного випуску	18
1.3.2	Рамки наступних випусків	20
1.3.3	Обмеження та винятки	20
1.4	Бізнес-контекст	21
1.4.1	Профілі зацікавлених сторін	21
1.4.2	Пріоритети проєкту	22
1.4.3	Робоче середовище	23
2 Постановка задачі	25
3 Проектування програмного проєкту	27
3.1	Проектування серверної частини проєкту	27
3.2	Проектування IoT частини проєкту	32
4 Кодування програмного проєкту	34
4.1	Кодування серверної частини проєкту	34
4.2	Кодування IoT частини проєкту	37
Висновки	39
Перелік джерел посилання	40
Додаток а	41
Додаток б	46


ВСТУП


Оранжереї використовують для вирощування сільськогосподарських та декоративних рослин, створюючи контрольоване середовище, яке забезпечує оптимальні умови для росту та розвитку рослин незалежно від зовнішніх кліматичних факторів. У зв'язку зі змінами клімату, зростанням населення та обмеженістю природних ресурсів, потреба в ефективному та стабільному вирощуванні рослин зростає. Традиційні методи керування оранжереями, які включають ручний моніторинг та регулювання, часто не відповідають сучасним вимогам до точності та оперативності, що призводить до значних втрат ресурсів та зниження врожайності.
Існуючі методи контролю клімату в оранжереях часто є неефективними через людський фактор та неможливість забезпечити постійний моніторинг усіх необхідних параметрів. Наприклад, недоотримання своєчасних даних про вологість ґрунту або рівень освітленості може призвести до пошкодження рослин та зниження їх якості. Ручний контроль також вимагає значних трудових ресурсів, що підвищує витрати на утримання оранжерей та робить такий метод менш привабливим для фермерів, та звичайних любителів рослин, у котрих це займає багато часу.
Інноваційні технології, такі як Інтернет речей, надають можливість автоматизувати процеси моніторингу та управління оранжереями, що дозволяє забезпечити більш точний контроль за умовами росту рослин та зменшити витрати на ресурси. Використання сенсорів для збирання даних про ключові параметри, такі як температура, вологість, освітленість та рівень CO2, у поєднанні з автоматичними системами поливу, вентиляції та освітлення, дозволяє створити оптимальні умови для рослин в режимі реального часу.
Розумна оранжерея, яка інтегрує технології Інтернету речей з мобільними та веб-застосунками, надає можливість фермерам та агрономам віддалено контролювати та керувати умовами у своїх оранжереях, отримувати сповіщення про будь-які критичні зміни параметрів та оперативно реагувати на них. Це не тільки підвищує ефективність управління, але й значно скорочує потребу в ручній праці, зменшуючи таким чином витрати на утримання.
Отже, необхідність створення системи розумної оранжереї зумовлена потребою в підвищенні ефективності використання ресурсів, збільшенні врожайності та якості рослин або продукції, а також у забезпеченні стабільності та надійності процесів вирощування рослин. Це обґрунтування нового продукту базується на сучасних викликах у сільському господарстві та потенціалі інноваційних технологій для їх подолання.


1 АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес можливості


Розумна оранжерея відкриває значний потенціал для підвищення ефективності сільськогосподарського виробництва через автоматизацію процесів та використання сучасних технологій Інтернету речей. Впровадження такої системи дозволяє забезпечити постійний моніторинг і управління умовами вирощування рослин, що значно покращує продуктивність та якість врожаю. Це, в свою чергу, створює конкурентні переваги для фермерів, дозволяючи їм досягати кращих результатів при менших витратах.
Інтеграція розумної оранжереї з мобільними та веб-застосунками надає можливість фермерам віддалено контролювати стан своїх оранжерей та оперативно реагувати на зміни умов. Це забезпечує не лише зручність, але й підвищує ефективність управління. Наприклад, фермери можуть отримувати сповіщення про критичні зміни в умовах вирощування та вживати необхідних заходів для збереження рослин та врожаю.
Додатковою бізнес-можливістю є аналіз даних, зібраних з сенсорів. Використання цих даних для прогнозування врожайності, виявлення патернів та оптимізації процесів дозволяє приймати більш обґрунтовані рішення та підвищувати продуктивність. Така система також може бути інтегрована з іншими інноваційними технологіями, такими як штучний інтелект та машинне навчання, для подальшого вдосконалення процесів управління оранжереєю.
Аналогічна система, яка вже існує, – це система розумного сільського господарства від компанії CropX. Вона також використовує розумні пристрої та датчики для моніторингу ґрунту та умов навколишнього середовища, надаючи фермерам можливість оптимізувати використання ресурсів та підвищувати врожайність. Більше інформації про цю систему можна знайти на їх офіційному сайті: CropX (https://cropx.com). Однак ця система розрахована на великі сільськогосподарські поля і включає у себе тільки пристрої та сервіс для моніторингу і ніяк не впливає на умови сама по собі.
Способи монетизації системи розумної оранжереї включають:
а)	Продаж обладнання та сенсорів для оранжерей. Це може бути початковий набір для нових користувачів або додаткове обладнання для розширення вже існуючих систем.
б)	Підписка на програмне забезпечення, яке забезпечує доступ до мобільних та веб-застосунків, аналітичних даних та інструментів управління. Підписка може бути на основі місячної або річної оплати.
в)	Монетизація даних, зібраних системою, шляхом їх аналізу та надання рекомендацій, звітів та прогнозів для користувачів. Це можуть бути як окремі платні звіти, так і регулярні аналітичні послуги на основі підписки.
Таким чином, розумна оранжерея представляє значний потенціал для підвищення ефективності та рентабельності сільськогосподарського виробництва через впровадження сучасних технологій та оптимізацію процесів.


1.1.2	Бізнес-цілі та критерії успіху


Основними бізнес-цілями для системи розумної оранжереї є створення інноваційної системи, котра підвищить ефективність управління сільськогосподарськими процесами через автоматизацію та оптимізацію використання ресурсів. Також важливо, щоб підвищувались показники прибутку та популярності. Тому можна сформувати наступні бізнес-цілі:
BO-1: Збільшення доходів компанії на 20% протягом перших двох років після впровадження системи.
BO-2: Залучення 1000 нових користувачів за перший рік.
BO-3: Розширення ринку збуту на міжнародному рівні. Критерієм успіху є прибуток, отриманий з-за кордону, котрий становитиме не менше 30% від загального обсягу продажів.
BO-4: Розвиток соціальних мереж, для залучення нових користувачів. Досягнення 30 тисяч підписників у соціальних мережах за перший рік.
Основними критеріями успіху будуть популярність системи та кількість активних користувачів, впізнаваність у соцмережах, зростання доходу та вихід на нові ринки. Продукт має відповідати стандартам якості на ринку, бути масштабованим, зручним для користувачів та витримувати навантаження на сайт та мобільний за стосунок, а також забезпечувати безпеку користувачів.


1.1.3	Потреби клієнтів або ринку


Типові клієнти розумної оранжереї – це малі фермери, які займаються вирощуванням сільськогосподарських та декоративних рослин у контрольованих умовах, а також люди, котрі займаються цим без наміру заробляти гроші. Ці клієнти стикаються з низкою проблем, які не завжди можуть бути ефективно вирішені існуючими системами. Основними потребами таких клієнтів є забезпечення оптимальних умов для вирощування рослин, спрощення процесу догляду за рослинами, економія часу та зусиль, а також забезпечення стабільного врожаю або красивих декоративних рослин.
Однією з основних проблем наших користувачів є складність у отриманні актуальної інформації про умови в оранжереї в реальному часі. Люди, які вирощують рослини для власного задоволення або для забезпечення сім'ї свіжими овочами і фруктами, часто не мають спеціальних знань і навичок, необхідних для ефективного управління умовами вирощування. Це призводить до того, що вони не завжди в змозі вчасно виявити проблеми, такі як недолік вологи, надлишок світла або зміни температури, що негативно впливає на здоров'я рослин і врожайність.
Таким чином, ключовими потребами ринку є простота використання, доступність, сумісність з побутовим обладнанням та надійність. Система розумної оранжереї повинна відповідати цим потребам, щоб забезпечити користувачам можливість ефективно вирощувати рослини без необхідності в спеціальних знаннях і навичках.


1.1.4	Бізнес-ризики


Розробка системи розумної оранжереї супроводжується рядом значних бізнес-ризиків, які слід враховувати для успішного впровадження та подальшої експлуатації продукту. По-перше, існує ризик високої конкуренції на ринку, оскільки вже існують інші подібні системи, які можуть запропонувати аналогічні функції. Відсутність своєчасного виходу на ринок може призвести до втрати потенційних клієнтів та зниження ринкової частки. Важливим фактором є також прийняття користувачами нової технології, оскільки може виникнути опір змінам або сумніви у корисності продукту.
Існує ймовірність технічних проблем при впровадженні та інтеграції системи, що може призвести до затримок у запуску та додаткових витрат. Ще одним ризиком є можливий негативний вплив на бізнес у разі невдачі проекту, що може позначитися на репутації компанії та її фінансовій стабільності. Крім того, економічні умови та зміни у законодавстві можуть вплинути на рентабельність проекту та спроможність клієнтів інвестувати в нову технологію.



1.2	Концепція рішення
1.2.1	Окреслення концепції


Концепція системи розумної оранжереї полягає у створенні інноваційного та доступного продукту, який змінить спосіб, у який люди вирощують сільськогосподарські та декоративні рослини у своїх домівках. Система має на меті забезпечити простий і ефективний моніторинг та управління умовами вирощування, що дозволить навіть новачкам у садівництві досягати відмінних результатів без значних зусиль і спеціальних знань.
Розумна оранжерея буде інтегрувати сучасні технології Інтернету речей для автоматизації процесів, надаючи користувачам можливість віддаленого контролю та управління через мобільні та веб-застосунки. Це забезпечить оперативний доступ до інформації про стан оранжереї та можливість швидкого реагування на зміни умов. Система також буде враховувати потреби різних категорій користувачів, пропонуючи інтуїтивно зрозумілий інтерфейс та широкий спектр налаштувань.
Впровадження розумної оранжереї сприятиме більш ефективному використанню ресурсів, таким як вода та електроенергія, завдяки точному контролю параметрів середовища. Це не тільки зменшить витрати, але й позитивно вплине на екологічний баланс, роблячи домашнє садівництво більш сталим.
Завдяки нашій системі, світ, у якому люди можуть вирощувати рослини з легкістю та задоволенням, стане реальністю. Користувачі зможуть насолоджуватися здоровими та красивими рослинами, отримуючи при цьому задоволення від процесу вирощування, який стане значно простішим і доступнішим завдяки впровадженню новітніх технологій.


1.2.2	Головна функціональність


Розумна оранжерея включає різноманітні функції, спрямовані на забезпечення зручності, ефективності та надійності управління процесами вирощування рослин. Головні функції веб-сайту та мобільного застосунку це налаштування умов, котрі необхідно підтримувати в оранжереї та моніторинг поточних показників мікроклімату.
Зі сторони веб-сайту:
Користувач:
MF-1:	Можливість реєстрації, авторизації.
MF-2:	Можливість придбати нові сенсори та розумні пристрої.
MF-3:	Можливість під’єднання нових сенсорів та розумних пристроїв до профілю.
MF-4:	Можливість створення кількох оранжерей з окремими налаштуваннями.
MF-5:	Можливість відслідковування умов у кожній окремій оранжереї в реальному часі.
MF-6:	Можливість налаштування умов оранжереї, щоб розумні пристрої автономно підтримували ці показники.
MF-7:	Можливість самостійно у реальному часі віддалено змінювати параметри: розпочати полив або вентиляцію, зменшити або збільшити кількість світла, увімкнути нагрівання.
MF-8:	Можливість оформлення підписки, яка надасть розширені можливості автоматизації та збору статистики.
MF-9:	Можливість звернутися у службу підтримки, якщо потрібна допомога з підключенням, налаштуванням, або обслуговуванням системи.
Адміністратор:
MF-10:	Можливість переглянути та проаналізувати статистику системи.
MF-11:	Можливість керувати інформацією та профілями, тобто виконувати стандартні CRUD операції.
Зі сторони мобільного додатку:
Користувач:
MF-12:	Можливість реєстрації, авторизації.
MF-13:	Можливість придбати нові сенсори та розумні пристрої.
MF-14:	Можливість під’єднання нових сенсорів та розумних пристроїв до профілю.
MF-15:	Можливість створення кількох оранжерей з окремими налаштуваннями.
MF-16:	Можливість відслідковування умов у кожній окремій оранжереї в реальному часі.
MF-17:	Можливість налаштування умов оранжереї, щоб розумні пристрої автономно підтримували ці показники.
MF-18:	Можливість самостійно у реальному часі віддалено змінювати параметри: розпочати полив або вентиляцію, зменшити або збільшити кількість світла, увімкнути нагрівання.
MF-19:	Можливість оформлення підписки, яка надасть розширені можливості автоматизації та збору статистики.
MF-20:	Можливість звернутися у службу підтримки, якщо потрібна допомога з підключенням, налаштуванням, або обслуговуванням системи.
Адміністратор:
MF-21:	Можливість переглянути та проаналізувати статистику системи.
MF-22:	Можливість керувати інформацією та профілями, тобто виконувати стандартні CRUD операції.
Зі сторони розумного пристрою:
MF-23:	Збір показників умов у оранжереї, таких як освітленість, вологість та температура.
MF-24:	Автоматичне регулювання умов вирощування  відповідно до налаштувань користувача.
MF-25:	Підключення до інтернету для забезпечення безперебійного доступу до даних та можливості віддаленого управління.


1.2.3	Припущення та залежності


Припущення:
а)	Користувачі матимуть доступ до стабільного інтернет-з'єднання та електропостачання для забезпечення безперебійної роботи системи розумної оранжереї.
б)	Основні користувачі системи володітимуть базовими навичками роботи з мобільними додатками та веб-сайтами.
в)	Усі користувачі матимуть стандартне побутове обладнання, таке як смартфони або комп'ютери, для доступу до функціоналу системи.
г)	Технології Інтернету речей продовжуватимуть розвиватися та підтримуватися основними постачальниками обладнання та програмного забезпечення.
д)	Розумна оранжерея буде інтегрована з існуючими системами розумного дому без значних технічних проблем.
Залежності:
а)	Використання сенсорів та обладнання від надійних постачальників, які забезпечують високу точність вимірювань та надійність роботи.
б)	Підтримка та оновлення програмного забезпечення для мобільних додатків та веб-сайту з боку розробників для забезпечення сумісності з новими версіями операційних систем.
в)	Співпраця з партнерами та постачальниками для забезпечення своєчасного постачання компонентів та обладнання.
г)	Інтеграція з іншими системами розумного дому, що вимагає взаємодії з розробниками цих систем для забезпечення сумісності.
д)	Дотримання всіх законодавчих вимог та стандартів, що регулюють використання бездротових технологій та Інтернету речей.


1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску


Програмна система має наступні головні функції для первинного випуску.
Для користувача у веб-браузері:
SIR-1:	Реєстрація та авторизація користувача;
SIR-2:	Опції для придбання нових сенсорів та розумних пристроїв до профілю користувача;
SIR-3:	Інтерфейс для під’єднання нових сенсорів та розумних пристроїв до профілю користувача;
SIR-4:	Налаштування умов для кількох оранжерей з окремими параметрами;
SIR-5:	Відслідковування умов у кожній оранжереї в реальному часі через веб-інтерфейс;
SIR-6:	Налаштування умов оранжереї для автоматичного підтримання параметрів розумними пристроями;
SIR-7:	Віддалене управління параметрами: полив, вентиляція, освітлення, нагрівання;
SIR-8:	Оформлення підписки для доступу до розширених можливостей автоматизації та збору статистики;
SIR-9:	Звернення до служби підтримки для допомоги з підключенням та налаштуванням системи;
Для адміністратора у веб-браузері:
SIR-10:	Перегляд та аналіз статистику системи.
SIR-11:	Керування інформацією та профілями користувачів, тобто виконання стандартних CRUD операцій.
Для користувача у мобільному додатку:
SIR-12:	Реєстрація та авторизація користувача;
SIR-13:	Опції для придбання нових сенсорів та розумних пристроїв до профілю користувача;
SIR-14:	Інтерфейс для під’єднання нових сенсорів та розумних пристроїв до профілю користувача;
SIR-15:	Налаштування умов для кількох оранжерей з окремими параметрами;
SIR-16:	Відслідковування умов у кожній оранжереї в реальному часі через мобільний додаток;
SIR-17:	Налаштування умов оранжереї для автоматичного підтримання параметрів розумними пристроями;
SIR-18:	Віддалене управління параметрами: полив, вентиляція, освітлення, нагрівання;
SIR-19:	Оформлення підписки для доступу до розширених можливостей автоматизації та збору статистики;
SIR-20:	Звернення до служби підтримки для допомоги з підключенням та налаштуванням системи;
Для адміністратора у мобільному додатку:
SIR-21:	Перегляд та аналіз статистику системи;
SIR-22:	Керування інформацією та профілями користувачів, тобто виконання стандартних CRUD операцій;
Для розумного пристрою:
SIR-23:	Збір даних про освітленість, вологість та температуру у оранжереї;
SIR-24:	Автоматичне регулювання умов вирощування відповідно до налаштувань користувача;
SIR-25:	Підключення до інтернету для забезпечення доступу до даних та можливості віддаленого управління;


1.3.2	Рамки наступних випусків


У оновлених випусках системи плануються такі нові впровадження:
SSR-1:	Розширені можливості автоматизації: впровадження складніших сценаріїв автоматизації, які дозволять користувачам створювати комплексні правила для управління мікрокліматом.
SSR-2:	Підтримка нових сенсорів та пристроїв: додавання підтримки нових типів сенсорів та розумних пристроїв для розширення можливостей системи.
SSR-3:	Соціальні функції: додавання можливості обміну інформацією та налаштуваннями між користувачами, а також створення спільнот для обговорення та обміну досвідом.
SSR-4:	Підтримка різних мов: додавання підтримки інших мов для розширення ринку користувачів.
SSR-5:	Покращення інтерфейсу: Постійне вдосконалення користувацького інтерфейсу для підвищення зручності використання системи.


1.3.3	Обмеження та винятки


Обмеження: 
LE-1:	Система вимагає постійного інтернет підключення та електропостачання для коректної роботи датчиків та розумних пристроїв; 
LE-2:	Система орієнтована на звичайних користувачів та не розрахована на використання у великих агропідприємствах або фермах;
LE-3:	Функціональність вебсайту та мобільного додатку буде гарантована тільки на сучасних версіях браузерів і операційних систем.
LE-4:	Система буде підтримувати тільки дві основні мови це українська та англійська. 


1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін


Таблиця 1 – Профілі зацікавлених сторін
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Власники оранжерей	Покращення якості догляду за рослинами, зменшення часу на управління оранжереєю	Позитивне, зацікавлене, оскільки система полегшує догляд за рослинами	Легкість використання, автоматизація процесів, доступність даних в реальному часі	Може потребувати навчання при першому використанні і налаштуванні, вартість системи
Інвестори	Фінансовий прибуток, швидке повернення інвестицій	Позитивне, зосереджене на результатах	Рентабельність, потенціал росту ринку, конкурентні переваги	Ризики ринкової конкуренції, довгострокові інвестиції
Постачальники обладнання	Збільшення продажів сенсорів та розумних пристроїв	Позитивне, якщо співпраця підвищує продажі	Партнерські відносини, збільшення попиту на обладнання	Вимоги до сумісності обладнання з системою
Адміністратори системи	Можливість моніторингу та управління користувачами і системою, підтримка користувачів	Позитивне, якщо система стабільна і викликає мало проблем у користувачів	Надійність системи, зручність управління даними, можливість підтримки користувачів	Обмежені ресурси на підтримку великої кількості користувачів
Продовження таблиці 1
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Розробники	Задоволення від створення якісного продукту, отримання досвіду	Позитивне, мотивоване	Чіткі вимоги, сучасні технології, можливість розвитку системи	Обмеження за часом та ресурсами проекту


1.4.2	Пріоритети проєкту


Таблиця 2 – Пріоритети проєкту
Показник	Виконання
(етапи)	Обмеження
(Граничні значення)	Ступінь свободи
(Допустимий діапазон)
План роботи	Випуск 1.0 до 10.06.2024	Розробка серверної частини до 29.04.2024;
Розробка клієнтської частини до 17.05.2024;
Розробка мобільного додатку до 27.05.2024;
Розробка програмного забезпечення для розумного пристрою до 05.06.2024;	Потрібно обов’язково виконати роботу до зазначеної дати.
Функціональність	Розробка всього зазначеного функціоналу з випуску 1.0 у серверній частині, веб частині, мобільній частині та розумному пристрої	Розробка до випуску 1.0	Усі найголовніші функції мають бути реалізовані у випуску 1.0


Продовження таблиці 2
Показник	Виконання
(етапи)	Обмеження
(Граничні значення)	Ступінь свободи
(Допустимий діапазон)
Якість	Тестування функцій. Забезпечення якості	Проходження тестів і виправлення помилок до релізу версії 1.0	Якомога менша кількість функціональних помилок у випуску 1.0
Персонал	Працює один розробник	Лише один розробник має реалізовувати проєкт 	Не допускається залучення інших розробників
Ціна	В межах встановленого бюджету	Вартість не має перевищувати встановлений бюджет	Перевищення бюджету допустимо до 10%


1.4.3	Робоче середовище


Для розробки серверної частини системи буде використано фреймворк ASP.NET[1] для мови C#. Свій вибір я зупинив на цій технології саме через її пристосованість до реалізації подібного програмного забезпечення, а також наявність у мене досвіду роботи із цим фреймворком. Розробка буде відбуватися у середовищі Visual Studio. У якості базі даних буде використано систему керування базами даних MongoDB[2], оскільки з нею я також працював раніше, а також вона добре пристосована для взаємодії з .NET системами. Окрім цього, це документо-орієнтована СКБД, яка надає зручні інструменти для зберігання і обробки даних, дозволяє легко створювати резервні копії.
Клієнтський веб-застосунок буде розроблено на основі сучасної бібліотеки ReactJS для мови програмування JavaScript, що включає себе також використання HTML та CSS. Освоєння цієї бібліотеки не є складним оскільки ми вже вивчали цю мову. Ці технології спрощують створення гарних інтерактивних веб інтерфейсів та забезпечують безпеку даних. Для написання коду і налагодження буде використано Visual Studio Code.
Мобільний застосунок буде написано мовою Kotlin. Вона працює поверх Java Virtual Machine і тому має багато спільного із мовою Java. Також ця мова має великий набір бібліотек, котрий розширюється ще й завдяки бібліотекам для Java. Буде використано середовище розробки IntelliJ IDEA, розроблене в першу чергу для написання програм на Java і Kotlin.
Для розробки частини системи з використанням інтернету речей, а саме датчиків та розумних пристроїв, буде використано мову Python. Ця мова дозволяє легко створювати програмне забезпечення для взаємодії з розумними пристроями завдяки великій кількості відкритих бібліотек. І в той же час ПЗ, написане цією мовою добре підходить для взаємодії з іншими системами та технологіями.


2 ПОСТАНОВКА ЗАДАЧІ


Програмна система для управління розумною оранжереєю Smart Orangery Management повинна підтримувати наступний функціонал:
	Реєстрація, вхід та вихід з системи. Надання можливості створення нового облікового запису, ввівши ім’я, електронну пошту та пароль. Зареєстровані користувачі мають можливість входити у вже створений обліковий запис, ввівши пошту і пароль, а також виходити з нього.
	Користувацький профіль. Забезпечення користувачів можливістю переглядати інформацію про профіль (ім’я, електронна пошта, пароль) та змінювати її за необхідності.
	Моніторинг та управління умовами в оранжереї. Здійснення автоматичного моніторингу та регулювання параметрів середовища (температура, вологість, освітленість та рівень вуглекислого газу) за допомогою сенсорів і смарт-пристроїв. Налаштування оптимальних умов для рослин та автоматичне відправлення команд пристроям для підтримки цих умов.
	Додавання та управління сенсорами та пристроями. Функціонал для додавання нових сенсорів і смарт-пристроїв до системи, редагування їхніх налаштувань, видалення сенсорів та пристроїв. Відображення актуального стану сенсорів і пристроїв.
	Журнали даних сенсорів. Збереження історичних даних, отриманих від сенсорів. Можливість перегляду історії змін параметрів середовища за певний період часу.
	Пуш-сповіщення. Надання можливості створення тригерів для параметрів середовища, після спрацювання яких користувач отримуватиме сповіщення на мобільному пристрої або електронну пошту.
	Ручне управління пристроями. Можливість вручну ввімкнути або вимкнути пристрої, такі як обігрівачі, охолоджувачі, зволожувачі, лампи та вентиляційні системи через веб-інтерфейс.
	Адміністративний функціонал. Можливість перегляду даних користувачів, зміни ролей, блокування та розблокування користувацьких профілів. Адміністратори можуть переглядати інформацію з усіх доступних таблиць у системі та здійснювати створення, редагування та видалення записів. Надається можливість створення резервних копій таблиць.
	Підтримка англійської та української мови. Можливість вибору мови інтерфейсу між українською та англійською у головній системі та системі адміністрування.


3 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЄКТУ
3.1	Проектування серверної частини проєкту


Для зображення всіх фізичних компонентів системи, була розроблена діаграма розгортання[3] (див. рис. 1). Розглянемо кожен компонент окремо.
Серверна частина відповідає за зв’язок всіх елементів системи. Вона розроблена за допомогою платформи ASP.NET Core[1]. Це дозволило створити швидкий та легко масштабований серверний додаток. Цей додаток включає в себе програмний код для роботи з базою даних, бізнес-логіку, захист та специфікацію REST API. Серверна частина забезпечує обробку запитів від веб-клієнта та смарт-пристроїв, а також взаємодію з базою даних.
У якості технології для бази даних було обрано MongoDB[2]. Ця технологія була вибрана через її структуру на основі документів, яка чудово впорається з великою кількістю даних. Для зв’язку з серверною частиною використовується MongoDB Driver через його простоту та швидкість. База даних зберігає інформацію про користувачів, сенсори, пристрої та журнали даних.
Веб-додаток розроблений за допомогою бібліотеки React. Ця технологія була обрана через свою популярність, ефективність та можливість створення динамічних і швидких користувацьких інтерфейсів. Взаємодія з серверною частиною здійснюється через REST API запити. Веб-додаток дозволяє користувачам переглядати та керувати оранжереями, сенсорами та пристроями.
Смарт-пристрої включають в себе різні сенсори (температури, вологості, освітленості, рівня CO2) та пристрої (обігрівач, охолоджувач, зволожувач, лампи, вентиляційні системи). Сенсори надсилають дані про поточні умови в оранжереї на сервер, а сервер на основі цих даних приймає рішення про необхідність вмикання або вимикання пристроїв. Смарт-пристрої взаємодіють з серверною частиною через TCP-з'єднання для отримання команд.
Для надсилання повідомлень користувачам про зміни умов в оранжереї або спрацювання тригерів, система використовує зовнішні сервіси, такі як служба електронної пошти або служба пуш-сповіщень. Це забезпечує своєчасне інформування користувачів про стан оранжереї.

 
Рисунок 1 – UML діаграма розгортання

UML-діаграму прецедентів зображено на рисунку 2, вона візуально зображає різноманітні сценарії взаємодії між акторами (користувачами) і прецедентами (випадками використання); описує функціональні аспекти системи (бізнес логіку).
Акторами у системі є «Користувач», «Гість», «Адміністратор» та «Розумний пристрій». Головний актор, «Користувач», має можливість реєстрації та входу в систему, після чого може керувати параметрами оранжереї. «Користувач» може додавати нові сенсори та пристрої до оранжереї, переглядати поточні дані сенсорів, змінювати налаштування пристроїв та переглядати історію даних сенсорів. «Користувач» також може налаштовувати тригери для надсилання сповіщень при зміні умов в оранжереї. Кожен «Користувач» має доступ до перегляду і редагування особистих даних, таких як ім’я, електронна пошта і пароль.
Окрім актора «Користувач» у системі також присутні актори «Гість», «Адміністратор» та «Розумний пристрій». «Гість» може тільки зареєструватися і увійти в систему, а актор «Адміністратор» може переглядати усі дані системи та редагувати і видаляти цю інформацію. «Розумний пристрій» взаємодіє з системою, надсилаючи дані про умови в оранжереї та отримуючи команди для регулювання цих умов.

 
Рисунок 2 – UML діаграма прецедентів

На основі опису системи та вимог до неї розроблено ER-діаграму. Вона зображує структуру даних та зв’язки між об’єктами системи.
Розроблену діаграму наведено на рисунку 3.


 Рисунок 3 – ER діаграма

ER діаграма містить п’ять сутностей, які лягли в основу бази даних. Цими сутностями є:
а)	Користувачі. Ця сутність представляє користувачів системи і містить наступні атрибути: ім'я, електронна пошта, хеш паролю, роль (user/admin), статус видалення та дати створення й останнього оновлення. Користувачі використовують систему для додавання сенсорів та пристроїв до оранжереї, перегляду даних сенсорів та управління пристроями.
б)	Оранжереї. Цей компонент представляє оранжереї, які містять інформацію про назву, опис, ідентифікатор користувача, оптимальні параметри для температури, вологості, освітленості та рівня CO2, а також статус видалення та дати створення й останнього оновлення. Кожна оранжерея асоційована з певним користувачем і містить різні сенсори та пристрої. 
в)	Сенсори. Цей компонент представляє сенсори, які використовуються для моніторингу параметрів середовища в оранжереї. Він містить атрибути, такі як тип сенсора, останнє значення, IP-адресу, статус видалення та дати створення й останнього оновлення. Сенсори відправляють дані до системи для подальшого аналізу та регулювання умов в оранжереї.
г)	Пристрої. Цей компонент представляє пристрої, які використовуються для регулювання умов в оранжереї. Він містить атрибути, такі як тип пристрою, статус, останнє значення часу, статус видалення та дати створення й останнього оновлення. Пристрої отримують команди від системи для забезпечення оптимальних умов в оранжереї.
д)	Журнал (записи) даних. Цей компонент представляє журнали даних, які зберігають хронологічні дані, отримані від сенсорів. Він містить атрибути, такі як значення, час запису, статус видалення та дати створення й останнього оновлення. Журнали даних дозволяють користувачам переглядати історію змін параметрів середовища за певний період часу.
Ці компоненти створюють повну модель даних для системи управління розумною оранжереєю, забезпечуючи можливість ефективного моніторингу та регулювання умов в оранжереї.


3.2	Проектування IoT частини проєкту


Діаграма прецедентів на рисунку 4 показує взаємодію розумних сенсорів та пристроїв з сервером для забезпечення моніторингу та регулювання умов в оранжереї.

 
Рисунок 4 – UML діаграма прецедентів для IoT частини

Розумні сенсори є важливим компонентом системи управління розумною оранжереєю, оскільки вони забезпечують постійний моніторинг ключових параметрів середовища. Кожен сенсор, будь-то сенсор температури, вологості, освітленості або рівня CO2, періодично збирає відповідні дані про навколишнє середовище в оранжереї. Дані потім надсилаються на сервер за допомогою HTTP-запитів[4] до REST API. Цей процес передачі даних є надійним та ефективним способом комунікації, який дозволяє серверу отримувати оновлення у реальному часі. На сервері дані приймаються, обробляються та зберігаються у базі даних для подальшого аналізу і прийняття рішень.
Розумні пристрої, такі як обігрівачі, охолоджувачі, зволожувачі та лампи, відповідають за підтримку оптимальних умов в оранжереї на основі отриманих даних від сенсорів. Після того, як сервер обробить і проаналізує дані від сенсорів, він приймає рішення про необхідність зміни умов і відправляє відповідні команди на розумні пристрої. Ці команди передаються по протоколу TCP[5], що забезпечує надійну та швидку передачу даних. Розумні пристрої, отримавши команду, виконують її, вмикаючи або вимикаючи відповідне обладнання. Після виконання команди пристрій надсилає зворотне повідомлення на сервер через TCP-з'єднання, повідомляючи про поточний стан та успішність виконання команди. Це дозволяє серверу мати актуальну інформацію про стан пристроїв і забезпечувати належний контроль за умовами в оранжереї.


4 КОДУВАННЯ ПРОГРАМНОГО ПРОЄКТУ
4.1	Кодування серверної частини проєкту


Розробка серверної частини для системи управління розумною оранжереєю (SmartOrangeryApi) включає використання сучасних технологій та архітектурних рішень для забезпечення надійної та масштабованої платформи. Серверна частина розроблена з використанням платформи ASP.NET Core та бази даних MongoDB, що забезпечує високу продуктивність та гнучкість у роботі з даними. При розробці також було використано REST API, що дозволило створити простий, зрозумілий і універсальний інтерфейс для взаємодії клієнтської частини та розумних пристроїв з серверною частиною. Специфікацію REST API наведено у таблиці 3.
У якості архітектурної моделі було обрано MVC (Model-View-Controller) з відмінністю у тому, що частину представлення (View) реалізовано окремо за допомогою ReactJS. Тобто компоненти React відіграють роль представлень у класичній моделі MVC.
Моделі представляють структури даних, що зберігаються в базі даних та використовуються в системі. Кожна модель відповідає певній сутності, наприклад, користувачам, оранжереям, сенсорам, пристроям та журналам даних. Всі моделі успадковують базову модель EntityBase, яка містить загальні атрибути, такі як ідентифікатор, дата створення, статус видалення тощо.
Контролери обробляють HTTP-запити від клієнтів (веб-додатку та смарт-пристроїв) та викликають відповідні сервіси для обробки бізнес-логіки. Кожен контролер відповідає за певний аспект системи, наприклад, управління користувачами, оранжереями, сенсорами та пристроями.
Автентифікація користувачів у системі SmartOrangeryApi здійснюється за допомогою JWT (JSON Web Token). Після успішної реєстрації або входу в систему користувач отримує JWT, який використовується для автентифікації в подальших запитах до сервера. JWT включає інформацію про ідентифікатор користувача та його роль, що дозволяє системі перевіряти автентичність запитів та визначати рівень доступу користувача.

Таблиця 3 – Специфікація REST API серверної частини проєкту
Сутність	Метод	Посилання	Опис дії
Користувачі	GET	/User	Повернення всіх користувачів системи
		/User/{id}	Повернення користувача за ідентифікатором
	POST	/User/register	Реєстрація користувача у системі
		/User/login	Вхід користувача у систему
	PUT	/User/{id}	Оновлення даних про користувача
	DELETE	/User/{id}	Видалення користувача
Оранжереї	GET	/Orangery	Повернення всіх оранжерей
		/Orangery /{id}	Повернення оранжереї за ідентифікатором
		/api/Orangery/user
/{userId}	Повернення оранжерей певного користувача
	POST	/Orangery	Створення нової оранжереї
	PUT	/Orangery/{id}	Оновлення даних про оранжерею
	DELETE	/Orangery/{id}	Видалення оранжереї

Продовження таблиці 3
Сутність	Метод	Посилання	Опис дії
Датчики	GET	/Sensor	Повернення всіх сенсорів системи
		/Sensor/{id}	Повернення сенсора за ідентифікатором
		/Sensor/orangery
/{orangeryId}	Повернення сенсора за ідентифікатором оранжереї
	POST	/Sensor/create	Створення нового сенсору
		/Sensor/log-data	Запис в базу нових даних з сенсора
	PUT	/Sensor/{id}	Оновлення даних про сенсор
	DELETE	/Sensor/{id}	Видалення сенсора
Пристрої	GET	/Device	Повернення всіх пристроїв системи
		/Device/{id}	Повернення сенсора за ідентифікатором
		/Device/orangery
/{orangeryId}	Повернення пристрою за ідентифікатором оранжереї
	POST	/Device/create	Створення нового пристрою
		/Device/{id}/turn-on	Увімкнення пристрою зі вказаним ідентифікатором

Продовження таблиці 3
Сутність	Метод	Посилання	Опис дії
Пристрої	POST	/Device/{id}/turn-off	Вимкнення пристрою зі вказаним ідентифікатором
	PUT	/Device/{id}	Оновлення даних про пристрій
	DELETE	/Device/{id}	Видалення пристрою
Записи умов	GET	/Log	Повернення всіх записів
		/Log/{id}	Повернення запису за ідентифікатором
		/Log/sensor/{sensorId}	Повернення записів за ідентифікатором датчика
	POST	/Log	Реєстрація користувача у системі
	PUT	/Log/{id}	Оновлення даних про користувача
	DELETE	/Log/{id}	Видалення користувача


4.2	Кодування IoT частини проєкту


Для розробки IoT частини проекту, зокрема розумних сенсорів та пристроїв, було використано мову програмування Python. Python обрано завдяки його простоті, широкому спектру бібліотек для роботи з мережею та підтримці різних протоколів зв'язку. Це забезпечує легкість у розробці та тестуванні пристроїв.
Розумні сенсори відповідають за моніторинг параметрів середовища в оранжереї, таких як температура. Сенсори періодично збирають дані та відправляють їх на сервер через HTTP-запити до REST API. Взаємодія з сервером відбувається шляхом надсилання POST-запитів з даними про поточний стан сенсора. У даному випадку використовується бібліотека requests для надсилання HTTP-запитів. Сенсор фіксує значення температури, формує JSON-об'єкт та надсилає його на сервер. Цей процес повторюється через заданий інтервал часу.
Розумні пристрої, такі як обігрівачі та охолоджувачі, отримують команди від сервера через TCP-з'єднання. Кожен пристрій прослуховує певний порт і чекає на вхідні команди. При отриманні команди пристрій виконує відповідну дію (вмикається або вимикається) та надсилає відповідь назад на сервер. У даному випадку використовується бібліотека socket для встановлення TCP-з'єднання, прийому команд та відправки відповідей.


ВИСНОВКИ


Під час виконання курсового проєкту було проведено концептуальне моделювання та аналіз предметної області управління розумними оранжереями. На основі цього аналізу було розроблено комплексну програмну систему, яка забезпечує підвищення ефективності моніторингу та регулювання умов в оранжереї.
Було створено концептуальну модель предметної області, що дозволило краще зрозуміти потреби користувачів і визначити основні вимоги до системи. Також було спроєктовано фізичну модель даних та реалізовано систему з використанням сучасних технологій програмування. Це включало розробку серверної частини на основі ASP.NET Core, використання MongoDB для зберігання даних, а також розробку IoT-компонентів на мові Python.
У результаті роботи було розроблено складну програмну систему, яка дозволяє користувачам ефективно управляти оранжереями. Система забезпечує зручний доступ до інформації про стан оранжереї, дозволяє додавати та налаштовувати сенсори і пристрої, а також отримувати та аналізувати дані від сенсорів у реальному часі. По завершенню розробки систему було протестовано та виправлено помилки. Це дозволило забезпечити надійність системи та переконатися у її зручності та працездатності.
Результатом даного курсового проєкту є розроблена система управління розумною оранжереєю з назвою SmartOrangeryApi, яка дозволяє користувачам легко моніторити та регулювати умови в оранжереї, забезпечуючи оптимальні умови для вирощування рослин. Ця система є зручним інструментом для управління розумними оранжереями, забезпечуючи простоту та ефективність моніторингу та регулювання умов.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Create a web API with ASP.NET Core and MongoDB. URL: https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mongo-app?view=aspnetcore-8.0&tabs=visual-studio  (дата звернення 25.04.24)
2.	MongoDB With C#. URL: https://www.mongodb.com/docs/languages/csharp/ (дата звернення 23.04.24)
3.	Wikipedia. Deployment diagram. URL: https://en.wikipedia.org/wiki/Deployment_diagram (дата звернення 01.05.24)
4.	GET and POST Requests Using Python: https://www.geeksforgeeks.org/get-post-requests-using-python/ (дата звернення 10.05.24)
5.	Python – Binding and Listening with Sockets. URL: https://www.geeksforgeeks.org/python-binding-and-listening-with-sockets/ (дата звернення 10.05.24)

 
ДОДАТОК А 
Код серверної частини
А.1 Метод для генерації JWT токена для аутентифікації користувача


1  public async Task<string> GenerateJwtToken(User user)
 2  {
 3      var tokenHandler = new JwtSecurityTokenHandler();
 4      var key = Encoding.UTF8.GetBytes(_jwtSettings.Key);
 5      var tokenDescriptor = new SecurityTokenDescriptor
 6      {
 7          Subject = new ClaimsIdentity(new Claim[]
 8          {
 9              new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
10              new Claim(ClaimTypes.Role, user.Role)
11          }),
12          Expires = DateTime.UtcNow.AddMinutes(_jwtSettings.DurationInMinutes),
13          SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
14          Issuer = _jwtSettings.Issuer,
15          Audience = _jwtSettings.Audience
16      };
17      var token = tokenHandler.CreateToken(tokenDescriptor);
18      return tokenHandler.WriteToken(token);
19  }





А.2 Метод для обробки даних з датчика і виклику відповідного методу для регуляції.


 1  public async Task RegulateConditions(Sensor sensor)
 2  {
 3      var orangery = await _orangeryService.GetAsync(sensor.OrangeryId.ToString());
 4      if (orangery == null)
 5      {
 6          throw new KeyNotFoundException("Orangery not found");
 7      }
 8  
 9      switch (sensor.Type)
10      {
11          case SensorType.Temperature:
12              await HandleTemperatureRegulation(sensor, orangery);
13              break;
14          case SensorType.Humidity:
15              await HandleHumidityRegulation(sensor, orangery);
16              break;
17          case SensorType.Light:
18              await HandleLightRegulation(sensor, orangery);
19              break;
20          case SensorType.CO2:
21              await HandleCO2Regulation(sensor, orangery);
22              break;
23      }
24  }


А.2 Метод для порівняння даних з сенсора з нормою і керування відповідними пристроями.


 1  private async Task HandleTemperatureRegulation(Sensor sensor, Orangery orangery)
 2  {
 3      if (sensor.LastValue < orangery.OptimalTemperature - 1)
 4      {
 5          await TurnDeviceOn(DeviceType.Heater, orangery.Id.ToString());
 6          await TurnDeviceOff(DeviceType.Cooler, orangery.Id.ToString());
 7      }
 8      else if (sensor.LastValue > orangery.OptimalTemperature + 1)
 9      {
10          await TurnDeviceOn(DeviceType.Cooler, orangery.Id.ToString());
11          await TurnDeviceOff(DeviceType.Heater, orangery.Id.ToString());
12      }
13      else
14      {
15          await TurnDeviceOff(DeviceType.Heater, orangery.Id.ToString());
16          await TurnDeviceOff(DeviceType.Cooler, orangery.Id.ToString());
17      }
18  }


А.3 Методи для увімкнення та вимкнення пристроїв.


 1  private async Task TurnDeviceOn(DeviceType deviceType, string orangeryId)
 2  {
 3      var device = await _deviceService.GetByTypeAndOrangeryIdAsync(deviceType, orangeryId);
 4      if (device != null)
 5      {
 6          await SendCommandToDevice(device, "turn_on");
 7          device.Status = "on";
 8          await _deviceService.UpdateAsync(device.Id.ToString(), device);
 9      }
10  }
11  
12  private async Task TurnDeviceOff(DeviceType deviceType, string orangeryId)
13  {
14      var device = await _deviceService.GetByTypeAndOrangeryIdAsync(deviceType, orangeryId);
15      if (device != null)
16      {
17          // Send command to device
18          await SendCommandToDevice(device, "turn_off");
19          // Update device status in the database
20          device.Status = "off";
21          await _deviceService.UpdateAsync(device.Id.ToString(), device);
22      }
23  }


А.4 Метод для надсилання команди пристрою.


 1  public async Task SendCommandToDevice(Device device, string command)
 2  {
 3      try
 4      {
 5          using (var client = new TcpClient(device.IpAddress, device.Port))
 6          {
 7              var data = Encoding.UTF8.GetBytes(command);
 8              var stream = client.GetStream();
 9  
10              stream.Write(data, 0, data.Length);
11              Console.WriteLine("Sent: {0}", command);
12  
13              data = new Byte[256];
14              var responseData = String.Empty;
15              var bytes = stream.Read(data, 0, data.Length);
16              responseData = Encoding.UTF8.GetString(data, 0, bytes);
17              Console.WriteLine("Received: {0}", responseData);
18          }
19      }
20      catch (ArgumentNullException e)
21      {
22          Console.WriteLine("ArgumentNullException: {0}", e);
23      }
24      catch (SocketException e)
25      {
26          Console.WriteLine("SocketException: {0}", e);
27      }
28  }


ДОДАТОК Б
Код IoT частини
Б.1 Код для отримання команди про початок чи припинення роботи пристрою від серверу


 1  import socket
 2  
 3  HOST = 'localhost'
 4  PORT = 65433
 5  
 6  def handle_command(command):
 7      if command == "turn_on":
 8          response = "Cooler is turned ON"
 9          print(response)
10      elif command == "turn_off":
11          response = "Cooler is turned OFF"
12          print(response)
13      else:
14          response = f"Unknown command: {command}"
15          print(response)
16      return response
17  
18  if __name__ == "__main__":
19      with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
20          s.bind((HOST, PORT))
21          s.listen()
22          print(f"Cooler listening on {HOST}:{PORT}")
23          while True:
24              conn, addr = s.accept()
25              with conn:
26                  print('Connected by', addr)
27                  while True:
28                      data = conn.recv(1024)
29                      if not data:
30                          break
31                      command = data.decode('utf-8')
32                      response = handle_command(command)
33                      conn.sendall(response.encode('utf-8'))


Б.2 Код для відправки даних про умови в оранжереї датчиком на сервер


 1  import requests
 2  import time
 3  import random
 4  import json
 5  
 6  # Configuration
 7  SERVER_URL = "https://localhost:7271/api/Sensor/log-data"  
 8  SENSOR_ID = "667b3b0b092ce839866d19db"  
 9  INTERVAL = 60  
10  
11  def send_data():
12      temperature = round(random.uniform(15.0, 30.0), 2)
13      data = {
14          "sensorId": SENSOR_ID,
15          "value": temperature
16      }
17      headers = {
18          "Content-Type": "application/json"
19      }
20      response = requests.post(SERVER_URL, data=json.dumps(data), headers=headers, verify=False)
21      if response.status_code == 200:
22          print(f"Data sent: {data}")
23      else:
24          print(f"Failed to send data: {response.status_code}, {response.text}")
25  
26  if __name__ == "__main__":
27      while True:
28          send_data()
29          time.sleep(INTERVAL)
